#include "../../menus.h"
#include "../../diceroller.h"
#include "BRP.h"




//GOAL FOR SCRIPT
//everything needed to make a standard Basic Role-Playing Character (5th ed, Universal Game Engine)
//Needs to have attrabutes, diraived stats, list of relivent features, equipment(just a basic set for now)
//class BRP char with roll inputs


//Classes
//RandomSetUp CALL;
Dice PLAY;


//Create folder for character sheets
void FolderOriginBRP()
{
  std::string foldername = "Characters/BRP";
  int result = mkdir(foldername.c_str(), 0777); //0777 is premissions for the folder, 7 is full permission and the three number posistions at the end are for different kinds of users? 
  if (result == 0) 
  {
    std::cout << "BRP Installed\n";
  }
  else {  }
}

//Special Dice Rolls for this system
//Rolls a 3D6, 3 six-sided dice added together
int ThreeDSix() 
{
  int x = 0;
  for(int i = 0; i < 3; i++)
  {
    x += PLAY.Dsix();
  }
  return x;
}

//Rolls a 2D6+6, 2 six-sided dice added together plus 6
int TwoDSixPlusSix() 
{ 
  int x = 0;
  for(int i = 0; i < 2; i++)
  {
    x += PLAY.Dsix();
  }
  return x+6;
}

//Skill struct
struct SkillData 
{
  std::string SkillName;
  std::string SubSkillName;
  int SkillBase;
  int SkillMod;
  //make a map? with the skill name as the key and the SkillBase struct as a container for the veriables. 
};

//BRP_human_base class
//Constructor to hold Characteristics, 
BRP_human_base::BRP_human_base(int a, int b, int c, int d, int e, int x, int y) 
{
  STR = a;
  CON = b;
  POW = c;
  DEX = d;
  CHA = e;
  INT = x;
  SIZ = y;
}

//Returns a STAT times 5, for a percentage roll
//This is at standard difficulty
int BRP_human_base::CharacteristicRoll(int r)
{
  int CharRoll = r * 5;
  return CharRoll;
}

//Will need to expand to allow input from user and modifiers for higher and lower ages
int BRP_human_base::Born()
{
  int startage = 17+PLAY.Dsix();

  Age = startage;

  return Age;
}

std::string BRP_human_base::DamageBonus()
{
  int Db = STR + SIZ;
    
  std::map<int, std::string> DamageModifierTable;
  DamageModifierTable[0] = "Error";
  DamageModifierTable[1] = "-1D6";
  DamageModifierTable[2] = "-1D4";
  DamageModifierTable[3] = "None";
  DamageModifierTable[4] = "+1D4";
  DamageModifierTable[5] = "+1D6";
  DamageModifierTable[6] = "+2D6";
  DamageModifierTable[7] = "+3D6";
  DamageModifierTable[8] = "Ea. +16"; //need to edit result 8, adding 1d6 for every 16th value above 73 (double check the book)

  int DMT;
  
  if (Db >= 2 && Db <= 12) {DMT = 1;}
  else if (Db >= 13 && Db <= 16) {DMT = 2;}
  else if (Db >= 17 && Db <= 24) {DMT = 3;}
  else if (Db >= 25 && Db <= 32) {DMT = 4;}
  else if (Db >= 33 && Db <= 40) {DMT = 5;}
  else if (Db >= 41 && Db <= 56) {DMT = 6;}
  else if (Db >= 57 && Db <= 72) {DMT = 7;}
  else if (Db >= 73) {DMT = 8;}
  else {DMT = 0;}

  DamBonus = DamageModifierTable[DMT];
  
  return DamBonus;
}

int BRP_human_base::HitPoints()
{
  HP = ceil((CON + SIZ)/2); 
  return HP;
}

int BRP_human_base::MajorWounds()
{
  MW = ceil(HP/2);
  return MW;
}

std::string BRP_human_base::DistinctiveFeatures()
{
  int DFs;
  std::string W;

  if (CHA <= 3 || CHA >= 17) {DFs = 4;}
  else if (CHA >= 4 && CHA <= 7) {DFs = 3;}
  else if (CHA >= 8 && CHA <= 9) {DFs = 2;}
  else if (CHA >= 10 && CHA <= 11) {DFs = 1;}
  else if (CHA >= 12 && CHA <= 14) {DFs = 2;}
  else if (CHA >= 15 && CHA <= 16) {DFs = 3;}
  else {DFs = 0;} 

  std::map<int, std::string> FeatureTypeTable;
  FeatureTypeTable[0] = "Error";
  FeatureTypeTable[1] = "Hair on head";
  FeatureTypeTable[2] = "Facial hair";
  FeatureTypeTable[3] = "Facial feature";
  FeatureTypeTable[4] = "Expression";
  FeatureTypeTable[5] = "Clothes";
  FeatureTypeTable[6] = "Bearing";
  FeatureTypeTable[7] = "Speech";
  FeatureTypeTable[8] = "Arms and legs";
  FeatureTypeTable[9] = "Torso";
  FeatureTypeTable[10] = "Legs and feet";

  //need to find logic to have two items seperated by 'and' and three plus items seperated by ',' and 'and' while ending in ''
  for (int i = 0; i < DFs; i++) 
  {
    int Q = PLAY.Dten();
    if (DFs == 2) {W = (i > 0) ? "": " and ";}
    else if (DFs == 3) {W = (i > 0) ? "": " and ";}
    else {W = "";} //DFs == 1
    //std::string W = (i >= 1) ? "": " and ";
    std::string WIP = FeatureTypeTable[Q] + W;
    UnitedFeatures += WIP;
  }

  return UnitedFeatures;
}

int BRP_human_base::ProSkillPointsPool()
{
  return 250; //default for nomral game, need to have options for other 
}

int BRP_human_base::PerSkillPonitsPool()
{
  int PPP = INT * 10;
  return PPP;
}

void BRP_human_base::Professions()
{
  std::string jobs[44] = {"Artist", "Assassin", "Athlete", "Beggar", "Clerk", "Computer Tech", "Crafter", "Criminal", "Detective", "Doctor", "Engineer", "Entertainer", "Explorer", "Farmer", "Gambler", "Herder", "Hunter", "Journalist", "Laborer", "Lawkeeper", "Lawyer", "Mechanic", "Merchant", "Noble", "Occultist", "Pilot", "Politician", "Priest", "Sailor", "Scholar", "Scientist", "Servant", "Shaman", "Slave", "Soldier", "Spy", "Student", "Teacher", "Technician", "Thief", "Tribesperson", "Warrior", "Wizard", "Writer"};

  int Hired = rand() % 44;

  Profession = jobs[Hired];

  std::string pay[5] = {"Destitute", "Poor", "Average", "Affluent", "Wealthy"};
 
  int Earned = rand() % 8;

  Wealth = "Broke";

  //I hate this series of if statements, these has to be a smarter way to do this. Easier for another person to change at a glance...
  
  //Artist
  if (Hired == 0) 
    {Earned = rand() % 9; if (Earned == 0 ){Wealth = "Destitute";} else if (Earned >= 1 && Earned <= 3){Wealth = "Poor";} else if (Earned >= 4 && Earned <= 6){Wealth = "Average";} else if (Earned == 7){Wealth = "Affluent";} else if (Earned == 8){Wealth = "Wealthy";};}
  //Assassin  
  else if (Hired == 1) 
    {if (Earned <= 3){Wealth = "Average";} else {Wealth = "Wealthy";};}
  //Athlete wip 
  else if (Hired == 2) 
    {if (Earned == 0 ){Wealth = "Destitute";} else if (Earned >= 1 && Earned <= 3){Wealth = "Poor";} else if (Earned >= 4 && Earned <= 6){Wealth = "Average";} else if (Earned == 7){Wealth = "Affluent";} else if (Earned == 8){Wealth = "Wealthy";};}
  //Beggar wip
  else if (Hired == 3) 
    {if (Earned == 0 ){Wealth = "Destitute";} else if (Earned >= 1 && Earned <= 3){Wealth = "Poor";} else if (Earned >= 4 && Earned <= 6){Wealth = "Average";} else if (Earned == 7){Wealth = "Affluent";} else if (Earned == 8){Wealth = "Wealthy";};}


}

std::string BRP_human_base::RandGender()
{
  int X = PLAY.Donehundred();

  if (X == 100) {Gender = "Non-Binary";}
  else if (X >= 51) {Gender = "Male";}
  else {Gender = "Female";}
  
  return Gender;
}

std::string BRP_human_base::HandDom()
{
  int Odds = PLAY.Donehundred();

  if (Odds == 100) {Handedness = "Cross-Dominant";}
  else if (Odds >= 97) {Handedness = "Ambidextrous";}
  else if (Odds >= 1 && Odds <= 13) {Handedness = "Left-Handed";}
  else {Handedness = "Right-Handed";}
  
  return Handedness;
}

void BRP_human_base::HeightandWeight()
{
  //2D-array of height and weight outcomes
  std::string HTandWT[2][5] = 
{
  {"Tiny","Short","Average","Tall","Towering"},
  {"Frail","Thin","Average","Overweight","Obese"}
};

  //poor if statement just to use the array. should adjust results based on CON and maybe random chance
    //Average outcome
  if (SIZ >= 10 && SIZ <= 13) {Height = HTandWT[0][2], Weight = HTandWT[1][2];}
    //Low end outcome, Tiny/Frail
  else if (SIZ < 10) {Height = HTandWT[0][1], Weight = HTandWT[1][1];}
    //High end outcome, Tall/Overweight
  else if (SIZ >= 14 && SIZ <= 17) {Height = HTandWT[0][3], Weight = HTandWT[1][3];}
    //Default outcome, Towering/Obese
  else {Height = HTandWT[0][4], Weight = HTandWT[1][4];}
}

int BRP_human_base::Skill_Category_Primary(int x)
{
  int P = 0;
  if (x >= 10)
   {
     int z = x-10;
     for (int i = 0; i < z; i++)
     {
       P++;
     }
   }
  else 
  {
    int z = 10-x;
     for (int i = 0; i < z; i++)
     {
       P--;
     }
  }
  return P;
}

int BRP_human_base::Skill_Category_Secondary(int x)
{
  int P = 0;
  if (x >= 10)
   {
     x = x - 10;
     int z = std::floor(x / 2);
     for (int i = 0; i < z; i++)
     {
       P++;
     }
   }
  else 
  {
    int z = std::floor((10-x) / 2);
     for (int i = 0; i < z; i++)
     {
       P--;
     }
  }
  return P;
}

int BRP_human_base::Skill_Category_Negative(int x)
{
  int P = 0;
  if (x >= 10)
   {
     int z = x-10;
     for (int i = 0; i < z; i++)
     {
       P--;
     }
   }
  else 
  {
    int z = 10-x;
     for (int i = 0; i < z; i++)
     {
       P++;
     }
  }
  return P;
}

void BRP_human_base::Skills()
{
  //stores base skill values and changes them based on GM setting
  //Handle mass skill base upfront, then individule?

 //toggle option for menu later
  bool SKILL_CATEGORY = true;

  if (SKILL_CATEGORY == true) 
  {
    //int for skil category outputs
    // int Combat_skillcategory = 0;
    // int Communication_skillcategory = 0;
    // int Manipulation_skillcategory = 0;
    // int Mental_skillcategory = 0;
    // int Perception_skillcategory = 0;
    // int Physical_skillcategory = 0;

    int A = Skill_Category_Primary(DEX);
    int B = Skill_Category_Primary(INT);
    
    int E = Skill_Category_Secondary(INT);
    int F = Skill_Category_Secondary(STR);
    int G = Skill_Category_Secondary(POW);
    int J = Skill_Category_Secondary(CHA);
    int H = Skill_Category_Secondary(CON);
    
    int Z = Skill_Category_Negative(SIZ);

    Communication_skillcategory = (B + G + J);
    Combat_skillcategory = ();

  }
  
  
  // int DodgeBase = DEX*2;

  // SkillData MasterSkillList[] 
  // {
  //   {"Appraise",15,0},
  //   {"Art",05,0},
  //   {"Dodge",DodgeBase,0},
  // };
  
  //std::map<std::string, int>SkillTable;
  //SkillTable["Appraise"] = 15;
  // SkillTable["Appraise"] = {"Appraise",15,0};
  // SkillTable["Art"] = {"Art",05,0};
  // SkillTable["Dodge"] = {"Dodge",DodgeBase,0};

  // std::string IOI = "Appraise";
  // int tax = SkillTable[IOI];
  // int Skillvalue = tax;
}

void BRP_human_base::CharName()
{
  std::cout << "\nWhat is the character's name?\n";
  std::getline(std::cin >> std::ws, CN); 
}

void BRP_human_base::PlayerName()
{
  std::cout << "\nWhat is your name?\n";
  std::getline(std::cin >> std::ws, PN);
}

void BRP_human_base::printChar(RandomSetUp& WOW)
{
  std::string BRPFilePath = "Characters/BRP/";
  
  std::string BRPCharFileName = BRPFilePath + CN + "_by_" + PN + ".txt";
  
  std::ofstream BRPText(BRPCharFileName,std::ofstream::out);

  BRPText << "===========================================================" << std::endl;
  BRPText << "\t\t\tPERSONAL" << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "Name: " << CN << "\t\t" << "Player: " << PN << std::endl;
  BRPText << "Culture: " << "Human" << "\t\t" << "Gender: " << Gender << std::endl;
  BRPText << "Handedness: " << Handedness << "\t" << "Height: " << Height << "\t" << "Weight: " << Weight << std::endl;
  BRPText << "Profession: " << Profession << "\t\t" << "Wealth: " << Wealth << std::endl;
  BRPText << "Gods/Religion: " << "Agnostic" << std::endl;
  BRPText << "\nThey have distintive " << UnitedFeatures << "." <<std::endl;
  BRPText << "MOV: " << 10 << "\t\t" << "Age: " << Age << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "\t\t\tCHARACTERISTICS" << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "STR " << std::setw(2) << std::setfill('0') << STR << "\t" << "Effort roll " << CharacteristicRoll(STR) << "%\t\t\t" << "INT " << std::setw(2) << std::setfill('0') << INT << "\t" << "Idea roll " << CharacteristicRoll(INT) << "%" << std::endl; 
  BRPText << "CON " << std::setw(2) << std::setfill('0') << CON << "\t" << "Stamina roll " << CharacteristicRoll(CON) << "%\t\t" << "CHA " << std::setw(2) << std::setfill('0') << CHA << "\t" << "Charm roll " << CharacteristicRoll(CHA) << "%" << std::endl;
  BRPText << "DEX " << std::setw(2) << std::setfill('0') << DEX << "\t" << "Agility roll " << CharacteristicRoll(DEX) << "%\t\t" << "POW " << std::setw(2) << std::setfill('0') << POW << "\t" << "Luck roll " << CharacteristicRoll(POW) << "%" << std::endl;  
  BRPText << "SIZ " << std::setw(2) << std::setfill('0') << SIZ << "\t\t\t\t\t" << "Damage Bonus of " << DamBonus << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "\t\t\tHIT POINTS" << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "HP: " << HP << " with Major Would occuring at " << MW << " HP" << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "\t\t\tSKILLS" << std::endl;
  BRPText << "===========================================================" << std::endl;
  BRPText << "Professional Skill Points Pool: "  << ProSkillPointsPool() << std::endl;
  BRPText << "Personal Skill Points Pool: "  << PerSkillPonitsPool() << std::endl;
  BRPText << "COMMUNICATION"  << "\t\t\t" << "MENTAL"  << "\t\t\t" << "PHYSICAL"  << "\t\t\t" << std::endl;
  BRPText << "MANIPULATION"  << "\t\t\t" << "PERCEPTION"  << "\t\t\t" << "COMBAT"  << "\t\t\t" << std::endl;
  
  BRPText << "\n\nSeed: " << WOW.currentSeed;
  
  BRPText.close();
}

void BRP_human_base::fullrandom(RandomSetUp& WOW)
{
  Born();
  Professions();
  RandGender();
  Skills();
  HandDom();
  HitPoints();
  MajorWounds();
  DamageBonus();
  DistinctiveFeatures();
  HeightandWeight();
  std::cout << "\n" << std::endl;
  std::cout << "Starting Age: " << Age << "\t" << "Works as a " << Wealth << " " << Profession << std::endl;
  std::cout << "Gender: " << Gender << "\t" << "Handedness: " << Handedness << std::endl;
  std::cout << "Height: " << Height << "\t" << "Weight: " << Weight << std::endl;
  std::cout << "STR " << STR << "\t" << "Effort roll " << CharacteristicRoll(STR) << "%\t\t\t" << "INT " << INT << "\t" << "Idea roll " << CharacteristicRoll(INT) << "%" << std::endl; 
  std::cout << "CON " << CON << "\t" << "Stamina roll " << CharacteristicRoll(CON) << "%\t\t" << "CHA " << CHA << "\t" << "Charm roll " << CharacteristicRoll(CHA) << "%" << std::endl;
  std::cout << "DEX " << DEX << "\t" << "Agility roll " << CharacteristicRoll(DEX) << "%\t\t" << "POW " << POW << "\t" << "Luck roll " << CharacteristicRoll(POW) << "%" << std::endl;  
  std::cout << "SIZ " << SIZ << std::endl;
  std::cout << "HP: " << HP << " with Major Would occuring at " << MW << " HP" << std::endl;
  std::cout << "Damage Bonus of " << DamBonus << std::endl;
  std::cout << "\nThey have distintive " << UnitedFeatures << "." <<std::endl;
  std::cout << "\nProfessional Skill Points Pool: "  << ProSkillPointsPool() << std::endl;
  std::cout << "Personal Skill Points Pool: "  << PerSkillPonitsPool() << std::endl;
  std::cout << "COMMUNICATION (" << Communication_skillcategory << "%)" << "\t\t\t" << "MENTAL (" << 420 << "%)" << "\t\t\t" << "PHYSICAL (" << 69 << "%)" << "\t\t\t" << std::endl;
  std::cout << "MANIPULATION"  << "\t\t\t" << "PERCEPTION"  << "\t\t\t" << "COMBAT"  << "\t\t\t" << std::endl;
  std::cout << "\n\nSeed: " << WOW.currentSeed;
} 